if (Number(process.version.slice(1).split('.')[0]) < 12) throw new Error('Node 12.0.0 or higher is required. Update Node on your system.')

const init = () => {
    client.prefix = require('./config.js').prefix
    client.levels = require('./config.js').levels

    client.loadCommands(`${__dirname}/commands/`)
    client.loadEvents(`${__dirname}/events/`)

    client.login(client.token)
}

console.log('Starting the Merc!');
require('dotenv').config();
const Discord = require('discord.js');
const client = new Discord.Client();

const greeting = require('./bot/commands/triggers/greeting');
const config = require('./bot/config/config');

client.on('ready', () => {
    if (config('app.features.startup_message') < 4) {
        console.log(`Logged in as ${client.user.tag}!`);
    }
});

// event listener on message
client.on('message', msg => {

    console.log(msg.author);
    if (
        msg.content.includes('://') ||
        msg.author.bot ||
        isFromMe(msg)
    ) {
        return;
    }

    if (msg.content === 'marco') {
        msg.channel.send('polo');
    }

    if (msg.content.includes('peanut')) {
        msg.channel.send("https://youtu.be/x6XGzq-Afrg?t=52");
    }
let num = Math.round(Math.random() * 5);
let target = 5
console.log(`chances are ${num} to ${target}`);
    if ((num == target) || config('app.debug.message_checks.global')) {
        console.log(`"quote mode"`);
        let split = msg.content.split(" ");
        let length = split.length;
        if (length < 7) {
            return;
        }
        let quotes = (Math.round(Math.random() * length)) * 0.5;

        console.log(quotes)
        if (quotes <= 0) {
            quotes = 1;
        }
        console.log(quotes);
        console.log(`split length: ${length} quotes: ${quotes}`);
        let message = split.map((msg) => {
            if ((Math.round(Math.random() * 25) == 4) && quotes > 0) {
                quotes--;
                console.log(quotes);
                return `"${msg}"`;
            }

            return msg;
        });
        msg.channel.send(message.join(' '));
        return;
    }

    if (msg.content.includes('exercise') || msg.content.includes('fit')) {

        let gifs = [
            "5w2hYvUDpaJaXMofhf",
            "xkhE54JlWjRNYXCYbu",
            "wKdnwYxVbXpwXZ99NI",
            "35Koksb9GwsifYhu9Q",
            "2wXstu3OO7EXqHhwgA",
            "pslSsRVsraewaPzGbx",
            "X8VxdpqWMqbTNQs2RY",
            "1Ajo7ORbVdheMjfLjq",
            "Ojr8CstK9rP8xcS9Ek"
        ];

        let gif = gifs[Math.floor(Math.random() * gifs.length)];
        msg.channel.send(`https://media.giphy.com/media/${gif}/giphy.gif`);
    }

    // TODO: 
    // wrap random and time checks in function that you can pass in to as callbacks. 
    // Checks env var, if env var is disabled the return result of callback
    if (msg.content.startsWith('hello') &&
        (Math.round(Math.random() * 100) == 69 || config('APP_DEBUG_DISABLE_RANDOM_CHECKS'))
    ) {
        msg.channel.send(greeting());
    }

    if (msg.content.includes('act natural')) {
        msg.channel.send('https://media.giphy.com/media/xTeWOxUNxVWGeOW2wE/giphy.gif');
    }

    if (msg.content.startsWith('morning') && msg.mentions) {
        if (msg.mentions.users.first() == client.user && new Date().getHours < 12) {
            msg.channel.send('jhdsfjhsdjfhsjdh');
        }
    }

    // if (config('commands.enabled') &&
    // msg.content.startsWith(config('APP_COMMAND_KEY'))) {
    // console.log(`Super modifier found: "${msg.content.valueOf()}".`);

    // let command = msg.content.valueOf().substring(1).split(" ");
    // console.log(command);
    // switch (command[0]) {
    //     case 'cleanup':
    //         msg.channel.send('triggering cleanup');


    //         break;

    //     default:
    //         break;
    // }
    // }

    // if (msg.content.valueOf() === 'F') {
    //     msg.channel.send('F');
    // }
});

/**
 * Bool eval to determine if author is me, chabudz
 * @param {Message} msg 
 * @returns {boolean}
 */
function isFromMe(msg) {
    return msg.author.id === client.user.id;
}

// Create an event listener for new guild members
client.on('guildMemberAdd', member => {
    // Send the message to a designated channel on a server:
    const channel = member.guild.channels.cache.find(ch => ch.name === 'member-log');
    // Do nothing if the channel wasn't found on this server
    if (!channel) return;
    // Send the message, mentioning the member
    channel.send(`Welcome to the server, ${member}`);
});

client.login(config('app.token'));
